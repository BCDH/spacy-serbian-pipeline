[paths]
train = "srp_training_data/srp_set-ud-train.spacy"
dev = "srp_training_data/srp_set-ud-dev.spacy"

[system]
gpu_allocator = null

[nlp]
lang = "srp"
pipeline = ["lemmatizer","tok2vec","tagger","parser"]
tokenizer = {"@tokenizers": "spacy.Tokenizer.v1"}
batch_size = 1000

[components]

[components.tok2vec]
factory = "tok2vec"

[components.tok2vec.model]
@architectures = "spacy.Tok2Vec.v2"

[components.tok2vec.model.embed]
@architectures = "spacy.MultiHashEmbed.v1"
width = ${components.tok2vec.model.encode.width}
attrs = ["ORTH", "SHAPE"]
rows = [5000, 2500]
include_static_vectors = false

[components.tok2vec.model.encode]
@architectures = "spacy.MaxoutWindowEncoder.v2"
width = 96
depth = 4
window_size = 1
maxout_pieces = 3

[components.lemmatizer]
factory = "srp_lemmatizer"

# There are no recommended transformer weights available for language 'sr'
# yet, so the pipeline described here is not transformer-based.


[components.tagger]
factory = "tagger"

[components.tagger.model]
@architectures = "spacy.Tagger.v1"
nO = null

[components.parser]
factory = "parser"

[components.parser.model]
@architectures = "spacy.TransitionBasedParser.v1"
tok2vec=${components.tok2vec.model}
state_type = "parser"
extra_state_tokens = false
hidden_width = 128
maxout_pieces = 3
use_upper = true
nO = null

[corpora]

[corpora.train]
@readers = "spacy.Corpus.v1"
path = "${paths.train}"
max_length = 500
#max_length = 2000
#max_steps = 20000
# lowered this to speed up while testing
#max_steps = 600

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
max_length = 0

[training]
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"

[training.optimizer]
@optimizers = "Adam.v1"

[training.batcher]
@batchers = "spacy.batch_by_words.v1"
discard_oversize = false
tolerance = 0.2

[training.batcher.size]
@schedules = "compounding.v1"
start = 100
stop = 1000
compound = 1.001

[initialize]
vectors = null
init_tok2vec = ${paths.init_tok2vec}
vocab_data = null
